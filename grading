Project 2
-------------------------------------------------------------------------------

Contributor Code Docu Adj. Score
----------- ---- ---- ---- -----
Arjun        248   30   +0 19/20 A
Michael     1217    2   +0 19/20 A

-------------------------------------------------------------------------------

Rubric:
1. Baseline:   15
2. Creativity: +1.5     pemdas, history
3. Design:     +1.5     nice UI, custom styling
4. Clean code: +1
5. Document:   +0
   Total:      19

-------------------------------------------------------------------------------

Comments:
* Overall
- You did a great job of making your code readable. Your methods are mostly
  short, and the comment headers make it easy to figure out what's going on.
- Good job breaking your app into separate parts in different directories.

* UI.java
- I like the way you create buttons programmatically.
- Also your styling is really nice.

* Translator.java
- Good job implementing order of operations and parentheses!
- I like the way you generalize the precedence of operators.
- Inserting extra * operators is a nice touch.

-------------------------------------------------------------------------------

Generic fine print:
a. "Code" shows the approximate lines of code contributed. This is just a line
   count of "git blame" and shouldn't be taken too seriously. Still, in many
   cases it gives quick sniff test of who did how much work.
b. "Docu" is the same thing applied to the documentation if it is in markdown.
c. "Adj." is a credit adjustment for contributors who did significantly more or
   less than than average contributor. Credit adjustments sum to 0.
d. "Score" is the final score, taken by adding the lines from the rubric and
   the credit adjustment.

1. "Baseline" means all requirements are met. This gives you a C if it's all you
   have.
2. "Creativity" is a measure of how much tought and energy you put into going
   beyond the minimum requirements.
   Points can be deducted here if some requirements are missing.
3. "Design" gives extra points for the look of the UI and overall usability.
   Points can be deducted here if there are errors or crashes.
4. "Clean code" indicates how easy the code is to read. Good code consists of
   short functions with clear names, organized in a coherent way.
   Points can be deducted here if code is redundant or especially messy.
5. "Document" gives extra points if the documentation is especially clear or
   comprehensive.
   Points can be deducted here if the documentation is missing or insufficient.
